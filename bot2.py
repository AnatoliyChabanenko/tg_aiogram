import kakieto_funk as fu
import config2
import logging
import keybord_my as kb
from google import proschet
from sqlighter import SQLighter
from aiogram import Bot, Dispatcher, executor, types
import asyncio
from parsing_class import Nibulon

logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ç–∏—Ü–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config2.TOKEN)
dp = Dispatcher(bot)
db = SQLighter('db.db')
nb = Nibulon()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.markup5)


@dp.message_handler(commands=['–ü—à–µ–Ω–∏—Ü—è'])
async def process_command(message: types.Message):
    await message.reply(fu.praice('–ü—à–µ–Ω–∏—Ü—è 2-–≥–æ –∫–ª–∞—Å—É'), reply_markup=kb.markup5)


@dp.message_handler(commands=['–Ø—á–º–µ–Ω—å'])
async def process_command(message: types.Message):
    await message.reply(fu.praice('–Ø—á–º—ñ–Ω—å'), reply_markup=kb.markup5)


@dp.message_handler(commands=['–ü–æ–¥—Å–æ–ª–Ω—É—Ö'])
async def process_command(message: types.Message):
    await message.reply(fu.praice('–°–æ–Ω—è—à–Ω–∏–∫ (–∑–∞–∫—É–ø—ñ–≤–ª—è –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ª–∏—à–µ –≤—ñ–¥ —Ç–æ–≤–∞—Ä–æ–≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤!)'), reply_markup=kb.markup5)


@dp.message_handler(commands=['geo'])
async def process_hi6_command(message: types.Message):
    await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞",
                        reply_markup=kb.markup_request)


@dp.message_handler(content_types=['location'])
async def handle_loc(message):
    km = float(proschet(message.location))
    await message.reply(f'–∫ –≤—ã–≥—Ä—É–∑–∫–µ {km}–∫–º, –ø–µ—Ä–µ–≤–æ–∑–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –æ–±–æ–π–¥–µ—Ç—Å—è {km*100}', reply_markup=kb.markup5)


@dp.callback_query_handler(lambda c: c.data == 'bot1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


@dp.message_handler(commands=['2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=kb.inline_kb_full)


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è
@dp.message_handler(commands=['subscribe'])
async def subscribe(massage: types.Message):
    if not (db.subscriber_exists(massage.from_user.id)):
        db.add_subscriber(massage.from_user.id)
    else:
        db.update_subscription(massage.from_user.id, True)

        await massage.answer('–æ—Ç–ª–∏—á–Ω–æ')


@dp.message_handler(commands=['unsubscribe'])
async def subscribe(massage: types.Message):
    if not (db.subscriber_exists(massage.from_user.id)):
        db.add_subscriber(massage.from_user.id, False)
        await massage.answer('–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–ø–∏—Å–∞–Ω—ã.')
    else:
        db.update_subscription(massage.from_user.id, False)

        await massage.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å ')


async def my_parsing(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        nb.update_content()



if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(my_parsing(10000))
    executor.start_polling(dp, skip_updates=True)
